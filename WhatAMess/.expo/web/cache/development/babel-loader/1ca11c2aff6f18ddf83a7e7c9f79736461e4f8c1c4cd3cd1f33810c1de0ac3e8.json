{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\nimport createMemoryHistory from \"./createMemoryHistory\";\nimport ServerContext from \"./ServerContext\";\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n  var callback = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        if (handling) {\n          queue.unshift(callback);\n          return;\n        }\n        handling = true;\n        yield cb();\n      } finally {\n        handling = false;\n        if (queue.length) {\n          var last = queue.pop();\n          last === null || last === void 0 ? void 0 : last();\n        }\n      }\n    });\n    return function callback() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return callback;\n};\nvar linkingHandlers = [];\nexport default function useLinking(ref, _ref) {\n  var independent = _ref.independent,\n    _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n    config = _ref.config,\n    _ref$getStateFromPath = _ref.getStateFromPath,\n    getStateFromPath = _ref$getStateFromPath === void 0 ? getStateFromPathDefault : _ref$getStateFromPath,\n    _ref$getPathFromState = _ref.getPathFromState,\n    getPathFromState = _ref$getPathFromState === void 0 ? getPathFromStateDefault : _ref$getPathFromState,\n    _ref$getActionFromSta = _ref.getActionFromState,\n    getActionFromState = _ref$getActionFromSta === void 0 ? getActionFromStateDefault : _ref$getActionFromSta;\n  React.useEffect(function () {\n    if (\"development\" === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    var handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  var _React$useState = React.useState(createMemoryHistory),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    history = _React$useState2[0];\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var server = React.useContext(ServerContext);\n  var getInitialState = React.useCallback(function () {\n    var value;\n    if (enabledRef.current) {\n      var _ref3;\n      var _location = (_ref3 = server === null || server === void 0 ? void 0 : server.location) != null ? _ref3 : typeof window !== 'undefined' ? window.location : undefined;\n      var path = _location ? _location.pathname + _location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n      var navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) != null ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      var state = getStateFromPathRef.current(path, configRef.current);\n      if (state) {\n        var rootState = navigation.getRootState();\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(\"An error occurred when trying to handle the link '\" + path + \"': \" + (typeof e === 'object' && e != null && 'message' in e ? e.message : e));\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    var getPathForRoute = function getPathForRoute(route, state) {\n      if (route !== null && route !== void 0 && route.path) {\n        var stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          var focusedRoute = findFocusedRoute(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && isEqual(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n    if (ref.current) {\n      var state = ref.current.getRootState();\n      if (state) {\n        var route = findFocusedRoute(state);\n        var path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n    var onStateChange = function () {\n      var _ref4 = _asyncToGenerator(function* () {\n        var navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        var previousState = previousStateRef.current;\n        var state = navigation.getRootState();\n        if (!state) {\n          return;\n        }\n        var pendingPath = pendingPopStatePathRef.current;\n        var route = findFocusedRoute(state);\n        var path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n        var _findMatchingState = findMatchingState(previousState, state),\n          _findMatchingState2 = _slicedToArray(_findMatchingState, 2),\n          previousFocusedState = _findMatchingState2[0],\n          focusedState = _findMatchingState2[1];\n        if (previousFocusedState && focusedState && path !== pendingPath) {\n          var historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            history.push({\n              path: path,\n              state: state\n            });\n          } else if (historyDelta < 0) {\n            var nextIndex = history.backIndex({\n              path: path\n            });\n            var currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex) {\n                yield history.go(nextIndex - currentIndex);\n              } else {\n                yield history.go(historyDelta);\n              }\n              history.replace({\n                path: path,\n                state: state\n              });\n            } catch (e) {}\n          } else {\n            history.replace({\n              path: path,\n              state: state\n            });\n          }\n        } else {\n          history.replace({\n            path: path,\n            state: state\n          });\n        }\n      });\n      return function onStateChange() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"names":["findFocusedRoute","getActionFromState","getActionFromStateDefault","getPathFromState","getPathFromStateDefault","getStateFromPath","getStateFromPathDefault","isEqual","React","createMemoryHistory","ServerContext","findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","handling","queue","callback","_ref2","_asyncToGenerator","unshift","last","pop","apply","arguments","linkingHandlers","useLinking","ref","_ref","independent","_ref$enabled","enabled","config","_ref$getStateFromPath","_ref$getPathFromState","_ref$getActionFromSta","useEffect","console","error","join","trim","handler","Symbol","push","indexOf","splice","_React$useState","useState","_React$useState2","_slicedToArray","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","getInitialState","useCallback","value","_ref3","location","window","path","pathname","search","thenable","then","onfulfilled","Promise","resolve","catch","_catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","_previousIndexRef$cur","navigation","previousIndex","record","get","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","_ref$current","getPathForRoute","route","stateForPath","focusedRoute","params","replace","onStateChange","_ref4","previousState","pendingPath","_findMatchingState","_findMatchingState2","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener"],"sources":["/home/vishal/Desktop/SpeMajorFrontend/node_modules/@react-navigation/native/src/useLinking.tsx"],"sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? // @ts-expect-error: we're already checking for this\n                      e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}